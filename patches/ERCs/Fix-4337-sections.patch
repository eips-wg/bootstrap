diff --git a/content/04337/index.md b/content/04337/index.md
index a1b7114c..d15431b1 100644
--- a/content/04337/index.md
+++ b/content/04337/index.md
@@ -308,7 +308,7 @@ During the verification loop, in addition to calling `validateUserOp`, the `hand
 If the paymaster's `validatePaymasterUserOp` returns a non-empty `context` byte array, then `handleOps` must call `postOp` on the paymaster after making the main execution call.
 Otherwise, no call is done to the `postOp` function.
 
-Maliciously crafted paymasters _can_ DoS the system. To prevent this, we use a reputation system. paymaster must either limit its storage usage, or have a stake. see the [reputation, throttling and banning section](#reputation-scoring-and-throttlingbanning-for-global-entities) for details.
+Maliciously crafted paymasters _can_ DoS the system. To prevent this, we use a reputation system. paymaster must either limit its storage usage, or have a stake. see the [reputation, throttling and banning section](#reputation-scoring-and-throttling-banning-for-global-entities) for details.
 
 The paymaster interface is as follows:
 
@@ -327,7 +327,7 @@ enum PostOpMode {
 }
 ```
 
-The `EntryPoint` must implement the following API to let entities like paymasters have a stake, and thus have more flexibility in their storage access (see [reputation, throttling and banning section](#reputation-scoring-and-throttlingbanning-for-global-entities) for details.)
+The `EntryPoint` must implement the following API to let entities like paymasters have a stake, and thus have more flexibility in their storage access (see [reputation, throttling and banning section](#reputation-scoring-and-throttling-banning-for-global-entities) for details.)
 
 ```solidity
 // add a stake to the calling entity
@@ -373,14 +373,14 @@ When a bundler receives a `UserOperation`, it must first run some basic sanity c
 
 * Either the `sender` is an existing contract, or the `initCode` is not empty (but not both)
 * If `initCode` is not empty, parse its first 20 bytes as a factory address or an [EIP-7702](../07702.md) flag.\
-  Record whether the factory is staked, in case the later simulation indicates that it needs to be. If the factory accesses the global state, it must be staked - see [reputation, throttling and banning section](#reputation-scoring-and-throttlingbanning-for-global-entities) for details.
+  Record whether the factory is staked, in case the later simulation indicates that it needs to be. If the factory accesses the global state, it must be staked - see [reputation, throttling and banning section](#reputation-scoring-and-throttling-banning-for-global-entities) for details.
 * The `verificationGasLimit` and `paymasterVerificationGasLimits` are lower than `MAX_VERIFICATION_GAS` (`500000`) and the `preVerificationGas` is high enough to pay for the calldata gas cost of serializing the `UserOperation` plus `PRE_VERIFICATION_OVERHEAD_GAS` (`50000`).
-* The `paymasterAndData` is either empty, or starts with the **paymaster** address, which is a contract that (i) currently has nonempty code on chain, (ii) has a sufficient deposit to pay for the UserOperation, and (iii) is not currently banned. During simulation, the paymaster's stake is also checked, depending on its storage usage - see [reputation, throttling and banning section](#reputation-scoring-and-throttlingbanning-for-global-entities) for details.
+* The `paymasterAndData` is either empty, or starts with the **paymaster** address, which is a contract that (i) currently has nonempty code on chain, (ii) has a sufficient deposit to pay for the UserOperation, and (iii) is not currently banned. During simulation, the paymaster's stake is also checked, depending on its storage usage - see [reputation, throttling and banning section](#reputation-scoring-and-throttling-banning-for-global-entities) for details.
 * The `callGasLimit` is at least the cost of a `CALL` with non-zero value.
 * The `maxFeePerGas` and `maxPriorityFeePerGas` are above a configurable minimum value that the bundler is willing to accept. At the minimum, they are sufficiently high to be included with the upcoming `block.basefee`.
 * The `sender` doesn't have another `UserOperation` already present in the mempool (or it replaces an existing entry with the same sender and nonce, with a higher `maxPriorityFeePerGas` and an equally increased `maxFeePerGas`).
   Only one `UserOperation` per sender may be included in a single bundle.
-  A sender is exempt from this rule and may have multiple `UserOperations` in the mempool and in a bundle if it is staked (see [reputation, throttling and banning section](#reputation-scoring-and-throttlingbanning-for-global-entities) below).
+  A sender is exempt from this rule and may have multiple `UserOperations` in the mempool and in a bundle if it is staked (see [reputation, throttling and banning section](#reputation-scoring-and-throttling-banning-for-global-entities) below).
 
 ### UserOperation Simulation
 
@@ -474,7 +474,7 @@ After creating the bundle, before including the transaction in a block, the bund
   if this `UserOperation` reverted.
 * Remove the offending `UserOperation` from the current bundle and from mempool.
 * If the error is caused by a `factory` or a `paymaster`, and the `sender`
-  of the `UserOperation` **is not** a staked entity, then issue a "ban" (see ["Reputation, throttling and banning"](#reputation-scoring-and-throttlingbanning-for-global-entities))
+  of the `UserOperation` **is not** a staked entity, then issue a "ban" (see ["Reputation, throttling and banning"](#reputation-scoring-and-throttling-banning-for-global-entities))
   for the guilty factory or paymaster.
 * If the error is caused by a `factory` or a `paymaster`, and the `sender`
   of the `UserOperation` **is** a staked entity, do not ban the `factory` / `paymaster` from the mempool.
@@ -569,7 +569,7 @@ The `initCode` MUST NOT be called directly from the `EntryPoint`, but from anoth
 The contract created by this factory method MUST accept a call to `validateUserOp` to validate the `UserOperation`'s signature.
 For security reasons, it is important that the generated contract address will depend on the initial signature.
 This way, even if someone can deploy an Account at that address, he can't set different credentials to control it.
-The Factory has to be staked if it accesses global storage - see [reputation, throttling and banning section](#reputation-scoring-and-throttlingbanning-for-global-entities) for details.
+The Factory has to be staked if it accesses global storage - see [reputation, throttling and banning section](#reputation-scoring-and-throttling-banning-for-global-entities) for details.
 
 NOTE: In order for the Wallet Application to determine the "counterfactual" address of the Account prior to its creation,
 it SHOULD make a static call to the `entryPoint.getSenderAddress()`
